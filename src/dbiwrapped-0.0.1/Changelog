1.6
===
Added methods to access fields by name also.

1.5
===
Added thread safe Database operation. Many threads can now request
a connection from Database safely. (A Mutex class has been added
to the library, that should be passed to the constructor of Database to make
the connection pool threadsafe.)

1.4.2
=====
Added private copy constructor and assignment operator to Database and
Query classes.


1.4
===
Name Change. Disruptive.
But I couldn't very well use "mysql++" now, could I.
So the new name is MySQL Wrapped. Or 'mysqlwrapped' in the more compact,
unix, form.
Note. Old header file "libsql++.h" is removed, and instead 
installed as "libmysqlwrapped.h".
Same goes for "libsql++.a" ==> "libmysqlwrapped.a"

Support for libmysqld - the embedded mysql server.
Instead of linking with libmysqlclient, link with libmysqld.
Read MySQL manual about the limitations of the embedded server.


1.3.3
=====

Added Database::Connected that makes a grabdb, pings the server, then does
a freedb - either it makes a new connection, or reuses an old one.

Removed old Query constructors accepting a Database pointer, leaving only
the constructors accepting a Database reference.


1.3.2
=====

Using mysql_ping the make sure the mysql server is present when reusing
old connections.

Remove freedb(grabdb()) from Database constructor

Lots of stuff implemented suggested and submitted by Stephan Beal of s11n.net:

Database ctor now accepts an (optional) (IError*), because this is 
the only way to report a failed connection. Since Database connects in 
the ctor, there was no way to catch a failed connection because 
RegErrHandler() couldn't be called until after the ctor. A better 
solution might be to add a connect() function to allow the client to 
explicitely connect (or re-connect). The default ctor is pretty useless 
now, because the client cannot connect if they use it.

Added Query::Connected in case a database connect failed.

grabdb() now properly deletes the db object it creates if the 
connection fails (previously there was no only a memleak, but a 
segfault when the failed connection was used by freedb().

and

freedb() now does nothing if it is passed a null connection


1.3
===

Better mysql column type support
	bigint (getbigint, getubigint)
	enum (class enum_t)
	set (class set_t)
	unsigned integers (getuval)


04-06-21
--------
bigint, unsigned, enum_t and set_t


04-06-11
--------
Improved error interface / logging

04-04-03
--------
Removed inline version
Converted to use std::string instead of char *'s


04-02-19
--------

Files
Database.h / Query.h - inline version

Database.H / Database.cpp - not the inline version
Query.H / Query.cpp



--------------------------------------------
I've created links in /usr/include to
Database.h and Connect.h


00-12-15
--------
Query.h replaces Connect.h with new method names
'example' directory created

